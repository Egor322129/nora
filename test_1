#include <iostream>
#include<ctime>
#include <vector>
#include <thread>
using namespace std;

class Dimensions_dead1: public exception
{
  virtual const char* what() const throw()
  {
    return "\nAlgo 1: dimensions failed";
  }
};

class Dimensions_dead2: public exception
{
  virtual const char* what() const throw()
  {
    return "\nAlgo 2: dimensions failed";
  }
};

class Matrix{
public:
	Matrix () : row(0), col(0) {
		vector<int>s;
		mat = s;
	};
	Matrix (Matrix const & M) :row(M.row), col(M.col), mat(M.mat) {};
	Matrix & operator=(Matrix const & M) {
		row = M.row;
		col = M.col;
		mat = M.mat;
		return *this;
	}
	Matrix (int rows, int cols, vector<int> v) : row(rows), col(cols), mat(v) {};
	vector<int> mat;
	int row, col;
	void print() {
		cout << "------res1--------";
		for (int i = 0; i < row; ++i){
			for (int j = 0; j < col; ++j)
				cout << mat[i*col + j] << " ";
			cout << endl;
		}
		cout << "-----------------";
	};
	
	int operator() (int i, int j) const {
		return mat[i*col + j];
	}
};

void t1(vector<int> & v, const Matrix & m1, const Matrix & m2) {
	int r = floor(m1.row/2);
	int a = m1.row;
	int b = m2.col;
	int d = m1.col;
	int s=0;
		for(int i = 0; i < r; ++i)
			for(int j = 0; j < b; ++j )
			{
				for(int k = 0; k < d; ++k)
					s+=m1(i,k)*m2(k,j);
				v.push_back(s);
				s=0;
			}
};

void t2(vector<int> & v, const Matrix & m1, const Matrix & m2 ) {
	int r = floor(m1.row/2);
	int a = m1.row;
	int b = m2.col;		
	int d = m1.col;	
	int s=0;
		for(int i = r; i < a; ++i)
			for(int j = 0; j < b; ++j )
			{
				for(int k = 0; k < d; ++k)
					s+=m1(i,k)*m2(k,j);
				v.push_back(s);
				s=0;
			}
	};

Matrix mult2(const Matrix m1, const Matrix m2){
		if (m1.col != m2.row)
			throw Dimensions_dead2();
		
		vector<int> res1;
		vector<int> res2;
		thread alpha(t1, ref(res1), ref(m1), ref(m2));
		thread beta(t2, ref(res2), ref(m1), ref(m2));
		alpha.join();
		beta.join();
		vector<int> res = res1;
		res.insert(res.end(), res2.begin(), res2.end());
		Matrix m(m1.row, m2.col, res);
		return m;
	}




void print(int mas[5][5], int m, int n)
{
	cout << "-----res2--------";
	for (int i = 0; i < m; ++i){
		for (int j = 0; j < n; ++j) 
			cout << mas[i][j] << " ";
		cout << "\n";
	}
	cout << "-----------------";
}

vector<int> init(int mas[5][5], int m, int n) {
	vector<int> v;
	for (int i = 0; i < m; ++i)
			for (int j = 0; j < n; ++j){
				int el = rand()%100;
				mas[i][j]=el;
				v.push_back(el);
			}
			return v;

}

void mult1 (int A[5][5], int B[5][5], int res[5][5], int m1, int n1, int m2, int n2){
	if (n1!=m2)
		throw Dimensions_dead1();
	else {
	for (int i = 0; i < m1; ++i)
		for (int j = 0; j < n2; ++j) {
			res[i][j] = 0;
				for (int k = 0; k < n1; ++k)
					res[i][j] += A[i][k]*B[k][j];
		}		
	}
}
	

bool compare(int mat1[5][5], int m, int n, const Matrix & mat2){
	for (int i = 0; i < m; ++i)
		for (int j = 0; j < n; ++j)
			if (mat1[i][j] != mat2(i,j))
				return 0;
	return 1;
					
}

	
	
bool test() {
		int A[5][5];
		int B[5][5];
		int m1 = rand()%5+1; 
		int n1 = rand()%5+1;
		int m2 = n1; 
		int n2 = rand()%5+1;
		vector<int> v1 = init(A, m1, n1);
		vector<int> v2 = init(B, m2, n2);
		Matrix mat_A(m1, n1, v1);
		Matrix mat_B(m2, n2, v2);

		int res1[5][5];
		Matrix res2;
		
		try {
			mult1(A, B, res1, m1, n1, m2, n2);
			res2 = mult2(mat_A, mat_B);  
			if (compare(res1, m1, n2, res2))
				return 1;
		else {
			print(res1, m1, n2);
			res2.print();
			return 0;
			}
		}
		catch(exception & e) {
			cout << e.what();
			return 1;
		}
}
		
		
int main() {
	srand(time(0));
	int N = 100;
	for (int i = 0; i < N; ++i) {
		cout << i << endl;
		if (!test()) {
			cout << "test failed";
			break;
		}
	}
	cout << "test passed";

	cin.get();
	cin.get();
	
	return 0;
}
