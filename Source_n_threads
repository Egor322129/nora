#include <iostream>
#include <vector>
#include <thread>
#include <mutex>
#include <time.h>
using namespace std;

mutex m;
mutex p;
static int N = 3; 
class Dimensions_dead: public exception
{
  virtual const char* what() const throw()
  {
    return "Algo 2: dimensions failed";
  }
};

class Matrix{
public:
	Matrix () : row(0), col(0) {
		vector<int>s;
		mat = s;
	};
	Matrix (Matrix const & M) :row(M.row), col(M.col), mat(M.mat) {};
	
	Matrix (int rows, int cols, vector<int> v) : row(rows), col(cols), mat(v) {};
	vector<int> mat;
	int row;
	int col;
	void print() {
		for (int i = 0; i < row; ++i){
			for (int j = 0; j < col; ++j)
				cout << mat[i*col + j] << " ";
			cout << endl;
		}
	};
	
	int operator() (int i, int j) const {
		return mat[i*col + j];
	}
};

void thr(vector<int> & v, const Matrix & m1, const Matrix & m2, int start, int finish) {
	p.lock();
	int a = m1.row;
	int b = m2.col;
	int d = m1.col;
	p.unlock();
	int s=0;
		for(int i = start; i < finish; ++i)
			for(int j = 0; j < b; ++j )
			{
				lock_guard<mutex> lock(m);
				for(int k = 0; k < d; ++k)
					s+=m1(i,k)*m2(k,j);
				v.push_back(s);
				s=0;
			}
};

Matrix multy_mult(const Matrix m1, const Matrix m2){
		if (m1.col != m2.row)
			throw Dimensions_dead();
		
		int N = 5;
		int slice = m1.row/N;
		vector<thread> thread_pool;
		vector<vector<int>> res(N);
		for (int i = 0; i < N; ++i) {
			int start;
			int finish;
			start = i*slice;
			if (i == N - 1){
				finish = m1.row;
			}
			else 
				finish = (i+1)*slice; 
			
			thread_pool.push_back(thread(thr, ref(res[i]), ref(m1), ref(m2), start, finish));
		}
		for (int i = 0; i < N; ++i)
			thread_pool[i].join();

		vector<int> result;
		for (int i = 0; i < N; ++i)
			result.insert(result.end(), res[i].begin(), res[i].end());
		Matrix m(m1.row, m2.col, result);
		return m;
	}



int main() {
	
	vector<int> v;
	cout << "enter row, col, matrix A \n";
	int row,col;
	cin >> row >> col;
	int value;
	for (int i = 0; i < row; ++i)
		for (int j = 0; j < col; ++j) {
			cin >> value;
			v.push_back(value);
		}
	Matrix a(row, col, v);
	cout << "enter row, col, matrix B \n";
	cin >> row >> col;
	v.clear();
	for (int i = 0; i < row; ++i)
		for (int j = 0; j < col; ++j){
			cin >> value;
			v.push_back(value);
		}
	Matrix b(row, col, v);
	//////////////////////////////////////
	Matrix C = multy_mult(a,b);
	C.print();
	cin.get();
	cin.get();
	return 0;
};
